<% let pageId='single' ; %>

  <%- include('../common/_header', {pageId:pageId }) %>

    <% console.log(jsonData) %>
      <div class="l-content"  data-barba="container" data-barba-namespace="single">
        <%- include('../common/_global-nav', {pageId:pageId }) %>
        <div class="p-archive l-container l-container--sp-full-width">
          <main id="main" class="p-archive__main p-single">
            <div class="p-single__inner">
              <div class="p-single__head">
                <time class="p-single__date">
                  公開日 : 2022/04/11
                </time>
                <time class="p-single__date">
                  更新日 : 2022/04/11
                </time>
                <h2 class="p-single__heading">
                  Vue-CLIのインストール時、vueコマンドエラーについてVue-CLIのインストール時、vueコマンドエラーについて
                </h2>
                <a href="" class="p-single__category">
                  Vue.js
                </a>
              </div>
              <div class="p-single__thumbnail">
                <img src="/img/common/img-vue.jpeg" alt="" class="p-single__img">
              </div>
              <article class="p-single__contents">
              
                <div class="p-toc u-hidden-lg-up">
                  <div class="p-toc__title-wrapper">
                    <h2 class="p-toc__title">目次</h2>
                  </div>
                  <nav class="p-toc__body">
                    <ul>
                      <li><a href="#chapter-1">前提知識</a></li>
                      <li><a href="#chapter-2">クロージャーとは？</a></li>
                      <li><a href="#chapter-3">主な役割</a></li>
                      <li><a href="#chapter-4">プライベート変数の定義</a></li>
                      <li><a href="#chapter-5">関数に状態を持たせる</a></li>
                      <li><a href="#chapter-6">高階関数の一部として機能する</a></li>
                      <li><a href="#chapter-7">複数の関数を返す場合</a></li>
                      <li><a href="#chapter-8">クロージャーを実用してみる</a>
                        <ul>
                          <li><a href="#chapter-9">名簿リスト</a></li>
                          <li><a href="#chapter-10">クリック状態の保持</a></li>
                        </ul>
                      </li>
                      <li><a href="#chapter-11"> まとめ: クロージャーを使用する場面</a></li>
                      <li><a href="#chapter-12">参考文献</a></li>
                    </ul>
                  </nav>
                </div>
                <h2 id="chapter-1" class="js-heading">前提知識</h2>
              
              
              
                <p>クロージャーを知る上で、まずはJavascriptの<strong>「スコープ」</strong>について知る必要があります。</p>
              
              
              
                <blockquote class="wp-block-quote">
                  <p>スコープとは変数の名前や関数などの参照できる範囲を決めるものです。 スコープの中で定義された変数はスコープの内側でのみ参照でき、スコープの外側からは参照できません。</p><cite>jsPrimer</cite>
                </blockquote>
              
              
              
                <p>以下、スコープに関する参考記事です。</p>
              
              
              
                <p><a href="https://jsprimer.net/basic/function-scope/" target="_blank" rel="noreferrer noopener">関数とスコープ – JavaScript
                    Primer</a></p>
              
              
              
                <h2 id="chapter-2" class="js-heading">クロージャーとは？</h2>
              
              
              
                <p>クロージャーとは、親スコープの変数を関数が使用している状態。<br>また、「外側のスコープにある変数への参照を保持できる」という関数の性質を指します。</p>
              
              
              
                <h2 id="chapter-3" class="js-heading">主な役割</h2>
              
              
              
                <p>クロージャーの主な使い道としては以下の2つが挙げられます。</p>
              
              
              
                <ul>
                  <li>グローバル変数の使用回避、プライベート変数の定義</li>
                  <li>関数に状態を持たせる</li>
                  <li>高階関数の一部としての機能</li>
                </ul>
              
              
              
                <h2 id="chapter-4" class="js-heading">プライベート変数の定義</h2>
              
              
              
                <p>クロージャーを使用することで、グローバルコンテキストに変数を定義することなく関数内の状態を管理できます。</p>
              
              
              
                <p>具体例を以下に示します。</p>
              
              
              
                <pre class="wp-block-preformatted language-js" tabindex="0"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              	<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'太郎'</span><span class="token punctuation">;</span><span class="token comment">// name は、fn()内のプライベート変数</span>
              	<span class="token keyword">function</span> <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 内部関数</span>
              		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
              	<span class="token punctuation">}</span>
              	<span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
              
              <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 太郎</span>
              </code></pre>
              
              
              
                <ul>
                  <li>変数<code>name</code>は<code>fn()</code>内のプライベート変数で外部から参照されない</li>
                  <li><code>displayName()</code>は&nbsp;<code>fn()</code>&nbsp;の中で使用する内部関数</li>
                  <li><code>displayName()</code>は親スコープにある変数<code>name</code>を参照し、使用できる</li>
                </ul>
              
              
              
                <p>
                  グローバルコンテキストに変数を定義する場合、変数の値が外部から参照されてしまうため意図しない挙動をとることがありますが、<br>外部スコープにある変数への参照を保持できるという性質を使って、内部関数で処理を実行することで外部から参照されないプライベート変数の定義が可能になります。
                </p>
              
              
              
                <h2 id="chapter-5" class="js-heading">関数に状態を持たせる</h2>
              
              
              
                <p>プライベート変数の定義に加えて、クロージャーにより関数内から特定の変数を参照し続けることで関数が状態を持つことができます。</p>
              
              
              
                <pre class="wp-block-preformatted language-js" tabindex="0"><code class="language-js"><span class="token comment">// 呼び出すたびにカウントアップした数値を出力する関数</span>
              <span class="token keyword">function</span> <span class="token function">createCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              	<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
              
              	<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              		num<span class="token operator">++</span><span class="token punctuation">;</span>
              		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
              	<span class="token punctuation">}</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
              
              <span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">createCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// =&gt; 1</span>
              <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// =&gt; 2</span>
              <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// =&gt; 3</span>
              
              <span class="token keyword">const</span> newCounter <span class="token operator">=</span> <span class="token function">createCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 初期化</span>
              <span class="token function">newCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// =&gt; 1</span>
              <span class="token function">newCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// =&gt; 2</span>
              <span class="token function">newCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// =&gt; 3</span>
              </code></pre>
              
              
              
                <p>
                  この時、<code>counter</code>は<code>createCounter()</code>の実行時に戻り値である<code>increment()</code>のインスタンスを保持、<br><code>increment()</code>は親スコープにある変数<code>num</code>の参照を保持しており、<br><code>counter</code>は<code>increment()</code>を経由して変数<code>num</code>への参照が残っているので、実行時に<code>num++</code>の処理が走ります。
                </p>
              
              
              
                <p><code>createCounter()</code>が実行された後でも変数<code>num</code>は<code>counter</code>から参照され続けているので、メモリが開放されずに状態を保つことができます。
                </p>
              
              
              
                <p>
                  以降、親関数である<code>createCounter()</code>が実行された時はそれぞれ別の変数<code>num</code>と<code>increment()</code>が定義され、newCounterからは別の変数<code>num</code>が参照されるので新たなカウンターが生成されます。<br>
                </p>
              
              
              
                <p>変数の値が保持される理由については参照されなくなったデータはガベージコレクションにより解放されるというJavaScriptのメモリ管理の仕組みが関わってきます。<br>メモリ管理に関しては以下の記事を参考にしました。</p>
              
              
              
                <ul>
                  <li><a href="https://tech-ja.netlify.app/articles/ja526246/index.html">JavaScriptメモリ管理</a></li>
                  <li><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Memory_Management">メモリ管理 – JavaScript | MDN</a>
                  </li>
                </ul>
              
              
              
                <h2 id="chapter-6" class="js-heading">高階関数の一部として機能する</h2>
              
              
              
                <p>クロージャーで定義することで、先ほどの例のようにグローバルな変数を持つことなく関数内の状態を管理できることに加えて、</p>
              
              
              
                <p>以下のように高階関数の一部として利用することもできます。<br>ちなみに、関数の引数や戻り値に関数を利用した関数のことを<strong>「高階関数」</strong>と呼びます。</p>
              
              
              
                <pre class="wp-block-preformatted language-js" tabindex="0"><code class="language-js"><span class="token keyword">function</span> <span class="token function">addNumber</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token keyword">return</span>  num <span class="token operator">+</span> value<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
              <span class="token punctuation">}</span>
              
              <span class="token keyword">const</span> add5 <span class="token operator">=</span> <span class="token function">addNumber</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// addNumberの引数に5を代入した状態の関数add5定義</span>
              <span class="token keyword">const</span> add10 <span class="token operator">=</span> <span class="token function">addNumber</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// addNumberの引数に10を代入した状態の関数add10定義</span>
              
              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add5</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5 + 10 で 15と出力される</span>
              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add10</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 10 + 10 で 20と出力される</span>
              </code></pre>
              
              
              
                <p>
                  上の例では<code>add5</code>と<code>add10</code>は<code>addNumber</code>の戻り値に定義した関数を共有していることから、<br><code>addNumber()</code>に渡す引数によって動的に関数を定義することができます。
                </p>
              
              
              
                <h2 id="chapter-7" class="js-heading">複数の関数を返す場合</h2>
              
              
              
                <p>複数の関数を返す例として四則演算を行うメソッドを持ったオブジェクトをクロージャーを用いて作成します。<br>四則演算を行うメソッド（<code>plus</code>, <code>minus</code>,
                  <code>multiply</code>, <code>divide</code>）を実行すると計算結果が出力されます。</p>
              
              
              
                <pre class="wp-block-preformatted language-js" tabindex="0"><code class="language-js"><span class="token keyword">function</span> <span class="token function">calcFactory</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">{</span>
                  <span class="token function-variable function">plus</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">let</span> result <span class="token operator">=</span> num <span class="token operator">+</span> value<span class="token punctuation">;</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>num<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> + </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    num <span class="token operator">=</span> result<span class="token punctuation">;</span><span class="token comment">// numにresultを格納する</span>
                  <span class="token punctuation">}</span><span class="token punctuation">,</span>
                  <span class="token function-variable function">minus</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">let</span> result <span class="token operator">=</span> num <span class="token operator">-</span> value<span class="token punctuation">;</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>num<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    num <span class="token operator">=</span> result<span class="token punctuation">;</span>
                  <span class="token punctuation">}</span><span class="token punctuation">,</span>
                  <span class="token function-variable function">multiply</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">let</span> result <span class="token operator">=</span> num <span class="token operator">*</span> value<span class="token punctuation">;</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>num<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> * </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    num <span class="token operator">=</span> result<span class="token punctuation">;</span>
                  <span class="token punctuation">}</span><span class="token punctuation">,</span>
                  <span class="token function-variable function">divide</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">let</span> result <span class="token operator">=</span> num <span class="token operator">/</span> value<span class="token punctuation">;</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>num<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> / </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    num <span class="token operator">=</span> result<span class="token punctuation">;</span>
                  <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span>
              <span class="token punctuation">}</span>
              <span class="token keyword">const</span> calc <span class="token operator">=</span> <span class="token function">calcFactory</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 初期値を10として設定</span>
              calc<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// =&gt; 10 + 5 = 15</span>
              calc<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// =&gt; 15 - 3 = 12</span>
              calc<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// =&gt; 12 * 3 = 36</span>
              calc<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// =&gt; 36 / 2 = 18</span>
              </code></pre>
              
              
              
                <p>
                  戻り値のメソッドはそれぞれ関数スコープを持っているため変数<code>result</code>は通常、外部から参照されませんが、この例ではメソッドを呼ぶたびに前回の計算結果をもとに四則演算を行いたいために、計算結果である変数<code>result</code>をレキシカルスコープにあたる関数の引数<code>num</code>に格納しています。
                </p>
              
              
              
                <h2 id="chapter-8" class="js-heading">クロージャーを実用してみる</h2>
              
              
              
                <p>実際に使いそうな機能をクロージャーを用いて作成してみました。</p>
              
              
              
                <h3 id="chapter-9" class="js-heading">名簿リスト</h3>
              
              
              
                <ul>
                  <li>値が保持されるため関数を呼び出すたびにナンバリングされる</li>
                </ul>
              
              
  

              
              
                <pre class="wp-block-preformatted language-js" tabindex="0"><code class="language-js"><span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">"太郎"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              </code></pre>
              
              
              
                <p>このように引数にそれぞれ任意の値を入れることでリストが生成されます。</p>
              
              
              
                <h3 id="chapter-10" class="js-heading">クリック状態の保持</h3>
              
              
              
                <ul>
                  <li>フォームなどのリクエストの重複を制御する</li>
                </ul>
              
              

              
                <h2 id="chapter-11" class="js-heading"> まとめ: クロージャーを使用する場面</h2>
              
              
              
                <p>クロージャー使用する場面には以下が考えられます</p>
              
              
              
                <ul>
                  <li>外から参照できない変数を定義する手段として</li>
                  <li>グローバル変数を減らす手段として</li>
                  <li>関数に状態を持たせたい時</li>
                </ul>
              
              
              
                <p>逆にこれらを必要としない場面で無闇に使わないように注意したいです。</p>
              
              
              
                <p>以下<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Closures#performance_considerations"
                    target="_blank" rel="noreferrer noopener">MDN – クロージャ</a>から引用</p>
              
              
              
                <blockquote class="wp-block-quote">
                  <p>あるタスクを実行する時、クロージャが必要とされていないのにいたずらに関数を他の関数の中に作成するのは、スクリプトのパフォーマンスに悪影響を及ぼすのであまり賢いやり方ではありません。</p>
                </blockquote>
              
              
              
                <h2 id="chapter-12" class="js-heading">参考文献</h2>
              
              
              
                <ul>
                  <li><a rel="noreferrer noopener"
                      href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Closures#practical_closures" target="_blank">クロージャ –
                      JavaScript | MDN</a></li>
                  <li><a rel="noreferrer noopener" href="https://jsprimer.net/basic/function-scope/" target="_blank">関数とスコープ –
                      JavaScript Primer</a></li>
                  <li><a href="https://www.udemy.com/course/javascript-essence/" target="_blank"
                      rel="noreferrer noopener">【JS】ガチで学びたい人のためのJavaScriptメカニズム</a></li>
                </ul>
              
              
              
                <p></p>
                <div class="p-single__sns">
                  <span class="u-hidden">SNSでシェアする</span>
                  <a href="https://twitter.com/share?url=http://myblog.local/%e3%80%90js%e3%80%91-%e3%82%af%e3%83%ad%e3%83%bc%e3%82%b8%e3%83%a3%e3%83%bc%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6/&amp;text=【JS】 クロージャーについて"
                    class="p-single__sns-link" target="_blank" rel="nofollow noopener">
                    <span class="u-hidden">Twitterでシェア</span>
                    <svg class="c-svg p-single__sns-svg" width="28" height="28" aria-label="Twitterのアイコン">
                      <use xlink:href="http://myblog.local/wp-content/themes/my_blog/wp/img/svg/sprite.min.svg#icon-twitter"></use>
                    </svg>
                  </a>
                  <a href="http://www.facebook.com/share.php?u=http://myblog.local/%e3%80%90js%e3%80%91-%e3%82%af%e3%83%ad%e3%83%bc%e3%82%b8%e3%83%a3%e3%83%bc%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6/"
                    class="p-single__sns-link" target="_blank" rel="nofollow noopener">
                    <span class="u-hidden">Facebookでシェア</span>
                    <svg class="c-svg p-single__sns-svg" width="28" height="28" aria-label="Facebookのアイコン">
                      <use xlink:href="http://myblog.local/wp-content/themes/my_blog/wp/img/svg/sprite.min.svg#icon-facebook"></use>
                    </svg>
                  </a>
                </div>
              </article>
            </div>
          </main>

          <%- include('../common/_sidebar') %>
        </div>
        <div class="p-related l-container">
          <h2 class="p-related__heading">
            関連記事
          </h2>
          <div class="p-related__cards">
            <article class="p-related__card">
              <a href="/single/" class="p-card">
                <span class="p-card__category">
                  Vue.js
                </span>
                <div class="p-card__thumbnail">
                  <img src="/img/common/img-vue.jpeg" alt="" class="p-card__img">
                </div>
                <div class="p-card__body">
                  <h3 class="p-card__title">
                    Vue-CLIのインストール時、vueコマンドエラーについてVue-CLIのインストール時、vueコマンドエラーについて
                  </h3>
                  <time class="p-card__date" datetime="">
                    2022/04/06
                  </time>
                </div>
              </a>
            </article>
            <article class="p-related__card">
              <a href="/single/" class="p-card">
                <span class="p-card__category">
                  HTML / CSS
                </span>
                <div class="p-card__thumbnail">
                  <img src="/img/common/img-html.jpeg" alt="" class="p-card__img">
                </div>
                <div class="p-card__body">
                  <h3 class="p-card__title">
                    カード型モジュールのコーディング時に気をつけること
                  </h3>
                  <time class="p-card__date" datetime="">
                    2022/03/31
                  </time>
                </div>
              </a>
            </article>
            <article class="p-related__card">
              <a href="/single/" class="p-card">
                <span class="p-card__category">
                  HTML / CSS
                </span>
                <div class="p-card__thumbnail">
                  <img src="/img/common/img-scss.jpeg" alt="" class="p-card__img">
                </div>
                <div class="p-card__body">
                  <h3 class="p-card__title">
                    Webのダークモード対応をSCSS変数で管理する方法を考える
                  </h3>
                  <time class="p-card__date" datetime="">
                    2022/03/31
                  </time>
                </div>
              </a>
            </article>
            <article class="p-related__card">
              <a href="/single/" class="p-card">
                <span class="p-card__category">
                  HTML / CSS
                </span>
                <div class="p-card__thumbnail">
                  <img src="/img/common/img-scss.jpeg" alt="" class="p-card__img">
                </div>
                <div class="p-card__body">
                  <h3 class="p-card__title">
                    Webのダークモード対応をSCSS変数で管理する方法を考える
                  </h3>
                  <time class="p-card__date" datetime="">
                    2022/03/31
                  </time>
                </div>
              </a>
            </article>
            
          </div>
        </div>
      </div>


      <%- include('../common/_footer', {pageId:pageId }) %>